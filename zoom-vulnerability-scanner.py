#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
أداة فحص متخصصة لثغرات Zoom Meetings وZoom API
Zoom Vulnerability Scanner
"""

import requests
import json
import argparse
import re
import socket
from datetime import datetime
import urllib3
import concurrent.futures

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ZoomVulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.vulnerabilities = []

    def banner(self):
        banner = """
    ╔═══════════════════════════════════════════════════════════════╗
    ║                    Zoom Vulnerability Scanner               ║
    ║               فحص متخصص لثغرات Zoom Meetings               ║
    ║                                                              ║
    ║  Meeting ID • Zoom API • Web Client • Desktop Client       ║
    ╚═══════════════════════════════════════════════════════════════╝
        """
        print(banner)

    def scan_meeting_ids(self, target_domain):
        """فحص اجتماعات Zoom المكشوفة"""
        print("🔍 فحص اجتماعات Zoom...")
        
        # أنماط اجتماعات Zoom الشائعة
        meeting_patterns = [
            f"https://zoom.us/j/{target_domain}",
            f"https://us02web.zoom.us/j/{target_domain}",
            f"https://us04web.zoom.us/j/{target_domain}",
            f"https://us05web.zoom.us/j/{target_domain}",
            f"https://us06web.zoom.us/j/{target_domain}",
            f"https://us07web.zoom.us/j/{target_domain}",
            f"https://us08web.zoom.us/j/{target_domain}",
            f"https://us09web.zoom.us/j/{target_domain}",
            f"https://us10web.zoom.us/j/{target_domain}",
            f"https://us11web.zoom.us/j/{target_domain}",
            f"https://zoom.us/wc/join/{target_domain}",
            f"https://zoom.us/s/{target_domain}",
            f"https://zoom.us/my/{target_domain}"
        ]
        
        exposed_meetings = []
        
        for url in meeting_patterns:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    # التحقق من وجود اجتماع فعال
                    meeting_indicators = [
                        'meeting has not started',
                        'join a meeting',
                        'waiting for host',
                        'enter your name',
                        'meeting password',
                        'zoom meeting'
                    ]
                    
                    page_content = response.text.lower()
                    if any(indicator in page_content for indicator in meeting_indicators):
                        exposed_meetings.append({
                            'url': url,
                            'status': 'active',
                            'response_size': len(response.content)
                        })
                        
                        self.vulnerabilities.append({
                            'platform': 'Zoom',
                            'vulnerability': 'Exposed Meeting',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'اجتماع Zoom مكشوف: {url}',
                            'details': {
                                'meeting_id': target_domain,
                                'status': 'active'
                            }
                        })
                        
            except Exception as e:
                continue
        
        return exposed_meetings

    def scan_zoom_api_leaks(self, target_domain):
        """فحص تسرب معلومات Zoom API"""
        print("🔍 فحص تسرب Zoom API...")
        
        api_endpoints = [
            'https://api.zoom.us/v2/users',
            'https://api.zoom.us/v2/meetings',
            'https://api.zoom.us/v2/webinars',
            'https://api.zoom.us/v2/accounts',
            'https://api.zoom.us/v2/report/users'
        ]
        
        # محاولة الوصول بدون مصادقة
        for endpoint in api_endpoints:
            try:
                response = self.session.get(endpoint, timeout=10)
                
                if response.status_code != 401:  # ليس خطأ مصادقة
                    self.vulnerabilities.append({
                        'platform': 'Zoom',
                        'vulnerability': 'API Information Leak',
                        'url': endpoint,
                        'risk_level': 'MEDIUM',
                        'description': f'معلومات API Zoom متاحة: {endpoint}',
                        'details': {
                            'status_code': response.status_code,
                            'response_size': len(response.content)
                        }
                    })
                    
            except Exception as e:
                continue

    def scan_zoom_web_client(self, target_domain):
        """فحص عميل Zoom Web"""
        print("🔍 فحص عميل Zoom Web...")
        
        web_client_urls = [
            f"https://zoom.us/wc/{target_domain}/join",
            f"https://zoom.us/wc/{target_domain}/start",
            f"https://zoom.us/wc/{target_domain}/leave",
            f"https://us02web.zoom.us/wc/{target_domain}/join",
            f"https://us04web.zoom.us/wc/{target_domain}/join"
        ]
        
        for url in web_client_urls:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    # التحقق من وجود إعدادات غير آمنة
                    security_indicators = [
                        'password not required',
                        'waiting room disabled',
                        'screen sharing enabled',
                        'recording enabled',
                        'chat enabled'
                    ]
                    
                    page_content = response.text.lower()
                    if any(indicator in page_content for indicator in security_indicators):
                        self.vulnerabilities.append({
                            'platform': 'Zoom',
                            'vulnerability': 'Insecure Web Client Settings',
                            'url': url,
                            'risk_level': 'MEDIUM',
                            'description': f'إعدادات غير آمنة في عميل Zoom Web: {url}',
                            'details': {
                                'endpoint': url,
                                'security_issues': [ind for ind in security_indicators if ind in page_content]
                            }
                        })
                        
            except Exception as e:
                continue

    def scan_zoom_desktop_client(self, target_domain):
        """فحص عميل Zoom Desktop"""
        print("🔍 فحص عميل Zoom Desktop...")
        
        # منافذ عميل Zoom Desktop
        zoom_ports = [8801, 8802, 8803, 19421, 19423, 3090]
        
        for port in zoom_ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((target_domain, port))
                sock.close()
                
                if result == 0:
                    self.vulnerabilities.append({
                        'platform': 'Zoom',
                        'vulnerability': 'Desktop Client Port Open',
                        'port': port,
                        'risk_level': 'LOW',
                        'description': f'عميل Zoom Desktop متاح على المنفذ {port}',
                        'details': {
                            'port': port,
                            'service': 'Zoom Desktop Client'
                        }
                    })
                    
            except Exception as e:
                continue

    def scan_zoom_subdomains(self, target_domain):
        """فحص نطاقات فرعية لـ Zoom"""
        print("🔍 فحص نطاقات فرعية لـ Zoom...")
        
        zoom_subdomains = [
            f"zoom.{target_domain}",
            f"meet.{target_domain}",
            f"join.{target_domain}",
            f"app.{target_domain}",
            f"api.{target_domain}",
            f"admin.{target_domain}",
            f"web.{target_domain}",
            f"us02.{target_domain}",
            f"us04.{target_domain}",
            f"us05.{target_domain}"
        ]
        
        for subdomain in zoom_subdomains:
            try:
                response = self.session.get(f"https://{subdomain}", timeout=10, verify=False)
                
                if response.status_code == 200:
                    self.vulnerabilities.append({
                        'platform': 'Zoom',
                        'vulnerability': 'Zoom Subdomain Exposed',
                        'subdomain': subdomain,
                        'risk_level': 'MEDIUM',
                        'description': f'نطاق فرعي لـ Zoom مكشوف: {subdomain}',
                        'details': {
                            'subdomain': subdomain,
                            'response_size': len(response.content)
                        }
                    })
                    
            except Exception as e:
                continue

    def scan_zoom_recordings(self, target_domain):
        """فحص تسجيلات Zoom المكشوفة"""
        print("🔍 فحص تسجيلات Zoom...")
        
        recording_patterns = [
            f"https://{target_domain}.zoom.us/rec/share/",
            f"https://us02web.zoom.us/rec/share/{target_domain}",
            f"https://us04web.zoom.us/rec/share/{target_domain}",
            f"https://{target_domain}.zoom.us/rec/play/",
            f"https://{target_domain}.zoom.us/rec/download/"
        ]
        
        for url in recording_patterns:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    # التحقق من وجود تسجيلات
                    recording_indicators = [
                        'recording',
                        'video',
                        'audio',
                        'mp4',
                        'download',
                        'share'
                    ]
                    
                    page_content = response.text.lower()
                    if any(indicator in page_content for indicator in recording_indicators):
                        self.vulnerabilities.append({
                            'platform': 'Zoom',
                            'vulnerability': 'Recording Exposure',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'تسجيل Zoom مكشوف: {url}',
                            'details': {
                                'recording_url': url,
                                'accessible': True
                            }
                        })
                        
            except Exception as e:
                continue

    def scan_zoom_chat_leaks(self, target_domain):
        """فحص تسرب دردشة Zoom"""
        print("🔍 فحص تسرب دردشة Zoom...")
        
        chat_endpoints = [
            f"https://zoom.us/chat/{target_domain}",
            f"https://zoom.us/messages/{target_domain}",
            f"https://us02web.zoom.us/chat/{target_domain}"
        ]
        
        for url in chat_endpoints:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    # التحقق من وجود محادثات
                    chat_indicators = [
                        'chat',
                        'message',
                        'conversation',
                        'private',
                        'group'
                    ]
                    
                    page_content = response.text.lower()
                    if any(indicator in page_content for indicator in chat_indicators):
                        self.vulnerabilities.append({
                            'platform': 'Zoom',
                            'vulnerability': 'Chat Data Exposure',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'بيانات دردشة Zoom مكشوفة: {url}',
                            'details': {
                                'chat_endpoint': url,
                                'data_exposed': True
                            }
                        })
                        
            except Exception as e:
                continue

    def scan_zoom_security_settings(self, target_domain):
        """فحص إعدادات الأمان في Zoom"""
        print("🔍 فحص إعدادات الأمان...")
        
        security_checks = [
            {
                'name': 'Waiting Room',
                'indicators': ['waiting room', 'waiting room enabled', 'waiting for host']
            },
            {
                'name': 'Password Protection',
                'indicators': ['password required', 'meeting password', 'passcode']
            },
            {
                'name': 'Screen Sharing',
                'indicators': ['screen sharing', 'share screen', 'present']
            },
            {
                'name': 'Recording',
                'indicators': ['recording', 'record meeting', 'auto recording']
            }
        ]
        
        base_urls = [
            f"https://zoom.us/j/{target_domain}",
            f"https://us02web.zoom.us/j/{target_domain}"
        ]
        
        for url in base_urls:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                
                if response.status_code == 200:
                    page_content = response.text.lower()
                    
                    for check in security_checks:
                        if not any(indicator in page_content for indicator in check['indicators']):
                            self.vulnerabilities.append({
                                'platform': 'Zoom',
                                'vulnerability': f'Insecure {check["name"]}',
                                'url': url,
                                'risk_level': 'MEDIUM',
                                'description': f'إعداد {check["name"]} غير آمن: {url}',
                                'details': {
                                    'setting': check['name'],
                                    'url': url
                                }
                            })
                            
            except Exception as e:
                continue

    def generate_report(self, target):
        """إنشاء تقرير شامل"""
        print("\n📊 تقرير فحص Zoom")
        print("=" * 60)
        
        if not self.vulnerabilities:
            print("✅ لم يتم العثور على ثغرات في Zoom")
            return
        
        # تجميع حسب المخاطر
        high = [v for v in self.vulnerabilities if v['risk_level'] == 'HIGH']
        medium = [v for v in self.vulnerabilities if v['risk_level'] == 'MEDIUM']
        low = [v for v in self.vulnerabilities if v['risk_level'] == 'LOW']
        
        print(f"🔴 ثغرات عالية: {len(high)}")
        print(f"⚠️  ثغرات متوسطة: {len(medium)}")
        print(f"ℹ️  ثغرات منخفضة: {len(low)}")
        print()
        
        # عرض التفاصيل
        for vuln in self.vulnerabilities:
            print(f"[{vuln['risk_level']}] {vuln['vulnerability']}: {vuln['description']}")
            if 'url' in vuln:
                print(f"    URL: {vuln['url']}")
            print()
        
        # حفظ النتائج
        report = {
            'target': target,
            'scan_date': datetime.now().isoformat(),
            'scan_type': 'Zoom Vulnerability Scan',
            'total_vulnerabilities': len(self.vulnerabilities),
            'high': len(high),
            'medium': len(medium),
            'low': len(low),
            'vulnerabilities': self.vulnerabilities
        }
        
        filename = f"zoom_vulnerabilities_{target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"💾 تم حفظ النتائج في: {filename}")

    def run_zoom_scan(self, target):
        """تشغيل فحص شامل لـ Zoom"""
        self.banner()
        
        print(f"🎯 بدء فحص Zoom: {target}")
        print("=" * 60)
        
        # تشغيل جميع عمليات الفحص
        scanners = [
            self.scan_meeting_ids,
            self.scan_zoom_api_leaks,
            self.scan_zoom_web_client,
            self.scan_zoom_desktop_client,
            self.scan_zoom_subdomains,
            self.scan_zoom_recordings,
            self.scan_zoom_chat_leaks,
            self.scan_zoom_security_settings
        ]
        
        for scanner in scanners:
            try:
                scanner(target)
            except Exception as e:
                print(f"⚠️ خطأ في {scanner.__name__}: {str(e)}")
        
        self.generate_report(target)
        return self.vulnerabilities

def main():
    parser = argparse.ArgumentParser(description='أداة فحص متخصصة لثغرات Zoom Meetings')
    parser.add_argument('-t', '--target', required=True, help='الهدف للفحص (Meeting ID أو نطاق)')
    parser.add_argument('-o', '--output', help='ملف الإخراج JSON')
    
    args = parser.parse_args()
    
    scanner = ZoomVulnerabilityScanner()
    vulnerabilities = scanner.run_zoom_scan(args.target)

if __name__ == "__main__":
    main()