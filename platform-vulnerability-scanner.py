#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
أداة فحص الثغرات الأمنية في المنصات والخدمات الشهيرة
Platform Vulnerability Scanner for Zoom, Microsoft Exchange, Cloud Servers, and Frameworks
"""

import requests
import socket
import ssl
import json
import argparse
import urllib3
from datetime import datetime
import dns.resolver
import concurrent.futures
import re
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class PlatformVulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def banner(self):
        banner = """
    ╔═══════════════════════════════════════════════════════════════╗
    ║                    Platform Vulnerability Scanner          ║
    ║               فحص الثغرات في المنصات والخدمات الشهيرة      ║
    ║                                                              ║
    ║  Zoom • Microsoft Exchange • Cloud Servers • Frameworks   ║
    ║  فحص شامل للثغرات الأمنية في المنصات المنتشرة              ║
    ╚═══════════════════════════════════════════════════════════════╝
        """
        print(banner)

    def scan_zoom_vulnerabilities(self, target):
        """فحص ثغرات Zoom Meetings"""
        print("🔍 فحص ثغرات Zoom...")
        zoom_issues = []
        
        # فحص اجتماعات Zoom المكشوفة
        zoom_patterns = [
            f"https://zoom.us/j/{target}",
            f"https://us02web.zoom.us/j/{target}",
            f"https://us04web.zoom.us/j/{target}",
            f"https://us05web.zoom.us/j/{target}",
            f"https://us06web.zoom.us/j/{target}",
            f"https://us07web.zoom.us/j/{target}",
            f"https://zoom.us/wc/join/{target}"
        ]
        
        for url in zoom_patterns:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                if response.status_code == 200:
                    if "meeting" in response.text.lower() or "zoom" in response.text.lower():
                        zoom_issues.append({
                            'platform': 'Zoom',
                            'vulnerability': 'Exposed Meeting',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'اجتماع Zoom مكشوف: {url}'
                        })
            except:
                pass
        
        # فحص تسرب معلومات Zoom
        try:
            api_url = f"https://api.zoom.us/v2/meetings/{target}"
            response = self.session.get(api_url, timeout=10)
            if response.status_code != 404:
                zoom_issues.append({
                    'platform': 'Zoom',
                    'vulnerability': 'API Information Leak',
                    'url': api_url,
                    'risk_level': 'MEDIUM',
                    'description': 'معلومات API Zoom متاحة'
                })
        except:
            pass
            
        return zoom_issues

    def scan_exchange_vulnerabilities(self, target):
        """فحص ثغرات Microsoft Exchange Server"""
        print("🔍 فحص ثغرات Microsoft Exchange...")
        exchange_issues = []
        
        # فحص OWA (Outlook Web Access)
        owa_urls = [
            f"https://{target}/owa",
            f"https://{target}/exchange",
            f"https://{target}/ecp",
            f"https://mail.{target}/owa",
            f"https://webmail.{target}/owa",
            f"https://{target}/Microsoft-Server-ActiveSync"
        ]
        
        for url in owa_urls:
            try:
                response = self.session.get(url, timeout=15, verify=False)
                if response.status_code == 200:
                    server_header = response.headers.get('Server', '')
                    if 'Microsoft-IIS' in server_header or 'Exchange' in response.text:
                        exchange_issues.append({
                            'platform': 'Microsoft Exchange',
                            'vulnerability': 'OWA Exposed',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'خدمة OWA مكشوفة: {url}'
                        })
            except:
                pass
        
        # فحص ثغرات Exchange المعروفة
        vulnerability_checks = [
            {
                'name': 'ProxyLogon',
                'path': '/ecp/pentest.js',
                'pattern': 'X-BEResource'
            },
            {
                'name': 'ProxyShell',
                'path': '/autodiscover/autodiscover.json',
                'pattern': 'powershell'
            }
        ]
        
        for check in vulnerability_checks:
            try:
                url = f"https://{target}{check['path']}"
                response = self.session.get(url, timeout=15, verify=False)
                if response.status_code != 404:
                    exchange_issues.append({
                        'platform': 'Microsoft Exchange',
                        'vulnerability': check['name'],
                        'url': url,
                        'risk_level': 'CRITICAL',
                        'description': f'ثغرة {check["name"]} محتملة في Exchange'
                    })
            except:
                pass
                
        return exchange_issues

    def scan_cloud_servers(self, target):
        """فحص خوادم الحوسبة السحابية"""
        print("🔍 فحص خوادم الحوسبة السحابية...")
        cloud_issues = []
        
        # فحص AWS EC2
        aws_patterns = [
            f"ec2-{target.replace('.', '-')}.compute-1.amazonaws.com",
            f"ec2-{target.replace('.', '-')}.us-east-1.compute.amazonaws.com"
        ]
        
        # فحص Azure VMs
        azure_patterns = [
            f"{target}.cloudapp.net",
            f"{target}.azurewebsites.net",
            f"{target}.trafficmanager.net"
        ]
        
        # فحص Google Cloud
        gcp_patterns = [
            f"{target}.c.INTERNAL_PROJECT_ID.internal",
            f"{target}.googleusercontent.com"
        ]
        
        all_patterns = aws_patterns + azure_patterns + gcp_patterns
        
        for hostname in all_patterns:
            try:
                socket.gethostbyname(hostname)
                cloud_issues.append({
                    'platform': 'Cloud Server',
                    'vulnerability': 'Exposed Instance',
                    'hostname': hostname,
                    'risk_level': 'MEDIUM',
                    'description': f'خادم سحابي مكشوف: {hostname}'
                })
            except:
                pass
        
        return cloud_issues

    def scan_framework_vulnerabilities(self, target):
        """فحص أطر العمل المنتشرة"""
        print("🔍 فحص أطر العمل...")
        framework_issues = []
        
        # فحص WordPress
        wp_checks = [
            '/wp-admin/',
            '/wp-login.php',
            '/xmlrpc.php',
            '/wp-content/',
            '/wp-includes/'
        ]
        
        for path in wp_checks:
            try:
                url = f"https://{target}{path}"
                response = self.session.get(url, timeout=10, verify=False)
                if response.status_code == 200:
                    if 'wordpress' in response.text.lower() or 'wp-' in response.text.lower():
                        framework_issues.append({
                            'platform': 'WordPress',
                            'vulnerability': 'WordPress Exposed',
                            'url': url,
                            'risk_level': 'MEDIUM',
                            'description': f'WordPress مكشوف: {url}'
                        })
            except:
                pass
        
        # فحص Drupal
        drupal_checks = [
            '/user/login',
            '/admin',
            '/node',
            '/sites/default/files/'
        ]
        
        for path in drupal_checks:
            try:
                url = f"https://{target}{path}"
                response = self.session.get(url, timeout=10, verify=False)
                if response.status_code == 200:
                    if 'drupal' in response.text.lower():
                        framework_issues.append({
                            'platform': 'Drupal',
                            'vulnerability': 'Drupal Exposed',
                            'url': url,
                            'risk_level': 'MEDIUM',
                            'description': f'Drupal مكشوف: {url}'
                        })
            except:
                pass
        
        # فحص Laravel
        laravel_checks = [
            '/.env',
            '/storage/logs/',
            '/vendor/',
            '/.git/'
        ]
        
        for path in laravel_checks:
            try:
                url = f"https://{target}{path}"
                response = self.session.get(url, timeout=10, verify=False)
                if response.status_code == 200:
                    if path == '/.env' and 'APP_KEY' in response.text:
                        framework_issues.append({
                            'platform': 'Laravel',
                            'vulnerability': 'Env File Exposed',
                            'url': url,
                            'risk_level': 'CRITICAL',
                            'description': f'ملف .env Laravel مكشوف: {url}'
                        })
                    elif path == '/.git/' and 'refs' in response.text:
                        framework_issues.append({
                            'platform': 'Git',
                            'vulnerability': 'Git Repository Exposed',
                            'url': url,
                            'risk_level': 'HIGH',
                            'description': f'مستودع Git مكشوف: {url}'
                        })
            except:
                pass
        
        return framework_issues

    def scan_jenkins_vulnerabilities(self, target):
        """فحص ثغرات Jenkins"""
        print("🔍 فحص ثغرات Jenkins...")
        jenkins_issues = []
        
        jenkins_urls = [
            f"http://{target}:8080",
            f"https://{target}:8443",
            f"http://{target}:8080/jenkins",
            f"https://{target}/jenkins"
        ]
        
        for url in jenkins_urls:
            try:
                response = self.session.get(url, timeout=10, verify=False)
                if response.status_code == 200:
                    if 'jenkins' in response.text.lower() or 'hudson' in response.text.lower():
                        # فحص الوصول بدون مصادقة
                        api_url = f"{url}/api/json"
                        try:
                            api_response = self.session.get(api_url, timeout=10, verify=False)
                            if api_response.status_code == 200:
                                jenkins_issues.append({
                                    'platform': 'Jenkins',
                                    'vulnerability': 'Unauthenticated Access',
                                    'url': api_url,
                                    'risk_level': 'HIGH',
                                    'description': f'Jenkins متاح بدون مصادقة: {url}'
                                })
                        except:
                            pass
            except:
                pass
        
        return jenkins_issues

    def scan_database_exposure(self, target):
        """فحص تعرض قواعد البيانات"""
        print("🔍 فحص تعرض قواعد البيانات...")
        db_issues = []
        
        # منافذ قواعد البيانات الشائعة
        db_ports = {
            3306: 'MySQL',
            5432: 'PostgreSQL',
            1433: 'MSSQL',
            27017: 'MongoDB',
            6379: 'Redis',
            9200: 'Elasticsearch',
            11211: 'Memcached',
            1521: 'Oracle',
            5000: 'SQLite'
        }
        
        for port, service in db_ports.items():
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((target, port))
                sock.close()
                
                if result == 0:
                    db_issues.append({
                        'platform': service,
                        'vulnerability': 'Database Exposed',
                        'port': port,
                        'risk_level': 'CRITICAL',
                        'description': f'قاعدة بيانات {service} مكشوفة على المنفذ {port}'
                    })
            except:
                pass
        
        return db_issues

    def generate_report(self, all_vulnerabilities, target):
        """إنشاء تقرير شامل"""
        print("\n📊 تقرير فحص الثغرات")
        print("=" * 60)
        
        if not all_vulnerabilities:
            print("✅ لم يتم العثور على ثغرات")
            return
        
        # تجميع حسب المخاطر
        critical = [v for v in all_vulnerabilities if v['risk_level'] == 'CRITICAL']
        high = [v for v in all_vulnerabilities if v['risk_level'] == 'HIGH']
        medium = [v for v in all_vulnerabilities if v['risk_level'] == 'MEDIUM']
        low = [v for v in all_vulnerabilities if v['risk_level'] == 'LOW']
        
        print(f"🚨 ثغرات حرجة: {len(critical)}")
        print(f"🔴 ثغرات عالية: {len(high)}")
        print(f"⚠️  ثغرات متوسطة: {len(medium)}")
        print(f"ℹ️  ثغرات منخفضة: {len(low)}")
        print()
        
        # عرض التفاصيل
        for vuln in all_vulnerabilities:
            print(f"[{vuln['risk_level']}] {vuln['platform']}: {vuln['description']}")
        
        # حفظ النتائج
        report = {
            'target': target,
            'scan_date': datetime.now().isoformat(),
            'total_vulnerabilities': len(all_vulnerabilities),
            'critical': len(critical),
            'high': len(high),
            'medium': len(medium),
            'low': len(low),
            'vulnerabilities': all_vulnerabilities
        }
        
        filename = f"platform_vulnerabilities_{target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\n💾 تم حفظ النتائج في: {filename}")

    def run_platform_scan(self, target):
        """تشغيل فحص شامل للمنصات"""
        self.banner()
        
        print(f"🎯 بدء فحص ثغرات المنصات: {target}")
        print("=" * 60)
        
        all_vulnerabilities = []
        
        # تشغيل جميع عمليات الفحص
        scanners = [
            self.scan_zoom_vulnerabilities,
            self.scan_exchange_vulnerabilities,
            self.scan_cloud_servers,
            self.scan_framework_vulnerabilities,
            self.scan_jenkins_vulnerabilities,
            self.scan_database_exposure
        ]
        
        for scanner in scanners:
            try:
                vulnerabilities = scanner(target)
                all_vulnerabilities.extend(vulnerabilities)
            except Exception as e:
                print(f"⚠️ خطأ في {scanner.__name__}: {str(e)}")
        
        self.generate_report(all_vulnerabilities, target)
        return all_vulnerabilities

def main():
    parser = argparse.ArgumentParser(description='أداة فحص ثغرات المنصات والخدمات الشهيرة')
    parser.add_argument('-t', '--target', required=True, help='الهدف للفحص (نطاق أو IP)')
    parser.add_argument('-o', '--output', help='ملف الإخراج JSON')
    
    args = parser.parse_args()
    
    scanner = PlatformVulnerabilityScanner()
    vulnerabilities = scanner.run_platform_scan(args.target)

if __name__ == "__main__":
    main()