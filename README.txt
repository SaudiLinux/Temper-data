═══════════════════════════════════════════════════════════════
                    دليل استخدام أداة Temper-Data
═══════════════════════════════════════════════════════════════

أداة متقدمة للكشف عن الثغرات الأمنية في منصات Joomla و WordPress

مبرمج الأداة: SayerLinux
الموقع: https://github.com/SaudiLinux
الإيميل: SayerLinux@gmail.com
الإصدار: 2.0

═══════════════════════════════════════════════════════════════

📋 المتطلبات الأساسية:
- Python 3.6 أو أحدث
- Windows / Linux / macOS
- اتصال إنترنت نشط

═══════════════════════════════════════════════════════════════

🔧 خطوات التثبيت:

1. تثبيت Python:
   - تحميل Python من الموقع الرسمي: https://python.org
   - تأكد من إضافة Python إلى PATH أثناء التثبيت

2. تثبيت المتطلبات:
   - افتح Command Prompt أو PowerShell
   - انتقل إلى مجلد الأداة: cd C:\Users\Dell\Desktop\TemperData
   - شغل سكربت التثبيت: install.bat
   - أو استخدم: pip install -r requirements.txt

═══════════════════════════════════════════════════════════════

🚀 طريقة الاستخدام:

الاستخدام الأساسي:
python temper-data.py -u [رابط الموقع]

الاستخدام المتقدم:
python temper-data.py -u https://example.com -o results.json -t 15

═══════════════════════════════════════════════════════════════

📊 الخيارات المتاحة:

-u, --url        : رابط الموقع المستهدف (إجباري)
                   مثال: -u https://wordpress-site.com

-o, --output     : اسم ملف النتائج (اختياري)
                   مثال: -o scan-results.json

-t, --threads    : عدد الخيوط للفحص (افتراضي: 10)
                   مثال: -t 20

--no-auto-save   : تعطيل الحفظ التلقائي للنتائج

═══════════════════════════════════════════════════════════════

💡 أمثلة عملية:

مثال 1 - فحص موقع WordPress:
python temper-data.py -u https://my-wordpress-site.com

مثال 2 - فحص موقع Joomla مع حفظ النتائج:
python temper-data.py -u https://my-joomla-site.com -o joomla-scan.json

مثال 3 - فحص سريع مع خيوط متعددة:
python temper-data.py -u https://target.com -t 25 -o detailed-report.json

مثال 4 - فحص موقع محلي:
python temper-data.py -u http://localhost/wordpress

═══════════════════════════════════════════════════════════════

🔍 ما الذي تبحث عنه الأداة:

✅ كشف نوع CMS (WordPress أو Joomla)
✅ فحص الثغرات الأمنية المعروفة
✅ اكتشاف الملفات والروابط المخفية
✅ البحث عن لوحات تحكم الإدارة
✅ اختبار تخطي جدار الحماية WAF
✅ فحص ملفات النسخ الاحتياطية
✅ البحث عن ملفات الإعدادات المكشوفة

═══════════════════════════════════════════════════════════════

📤 النتائج:

يتم حفظ النتائج في ملف JSON يحتوي على:
- نوع CMS المكتشف
- قائمة الثغرات مع مستوى الخطورة
- الروابط المخفية التي تم العثور عليها
- مواقع لوحات التحكم
- نتائج اختبارات تخطي WAF
- وقت وتاريخ الفحص

### الحفظ التلقائي للنتائج
يتم حفظ النتائج تلقائياً بعد كل فحص في ملف بصيغة:
`temper-data_[النطاق]_[التاريخ]_[الوقت].json`

مثال: `temper-data_example.com_20250811_040911.json`

لتعطيل الحفظ التلقائي استخدم الخيار: `--no-auto-save`

═══════════════════════════════════════════════════════════════

⚠️ تحذيرات مهمة:

1. استخدم الأداة فقط على المواقع التي تمتلك صلاحية اختبارها
2. احترم قوانين بلدك المتعلقة بالاختبار الأمني
3. لا تستخدم الأداة لأغراض ضارة أو غير قانونية
4. المبرغ غير مسؤول عن أي استخدام غير قانوني

═══════════════════════════════════════════════════════════════

🆘 حل المشاكل الشائعة:

مشكلة: "python is not recognized"
الحل: تأكد من تثبيت Python وإضافته إلى PATH

مشكلة: "Permission denied"
الحل: شغل Command Prompt كمسؤول

مشكلة: "No module named requests"
الحل: شغل: pip install requests colorama urllib3

مشكلة: اتصال بطيء
الحل: قلل عدد الخيوط باستخدام -t 5

═══════════════════════════════════════════════════════════════

📞 الدعم الفني:

لأي مشاكل أو استفسارات:
- GitHub: https://github.com/SaudiLinux/temper-data
- إيميل: SayerLinux@gmail.com
- تويتر: @SayerLinux

═══════════════════════════════════════════════════════════════

🎓 نصائح للاستخدام الأمثل:

1. ابدأ بفحص مواقعك الخاصة أولاً
2. استخدم خيار الحفظ (-o) للاحتفاظ بالنتائج
3. راقب الوقت المستغرق لكل فحص
4. قم بفحص مواقعك بانتظام
5. شارك النتائج مع فريق الأمن

═══════════════════════════════════════════════════════════════

تم التحديث آخر مرة: 2024
الإصدار الحالي: 2.0
═══════════════════════════════════════════════════════════════